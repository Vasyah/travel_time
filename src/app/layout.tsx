'use client'

import { Geist, Geist_Mono } from 'next/font/google'
import { Theme, ThemePreset } from '@consta/uikit/Theme'
import { LayoutExampleBig } from '@/ui/Header/Header'
import React, { useState } from 'react'
import { TravelMenu } from '@/shared/ui/Menu/Menu'
import '@consta/themes/Theme_color_highlightsGreenDefault'
import '../shared/ui/globals.css'
import '@/features/lib/zIndexes.css'
import { SearchFeature } from '@/features/Search/ui/Search'
import { QueryClientProvider } from '@tanstack/react-query'
import { queryClient } from '@/shared/config/reactQuery'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import moment from 'moment'
import { Col, ConfigProvider, Flex, Layout, Row } from 'antd'
import { SafeHydrate } from '@/components/SafeHydrate/SafeHydrate'
import { Today } from '@/features/Today/Today'
import styles from './layout.module.css'
import 'moment/locale/ru'

moment.locale('ru') // Для локализации дат

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})
//
// export const metadata: Metadata = {
//     title: "Create Next App",
//     description: "Generated by create next app",
// };

const preset: ThemePreset = {
  color: {
    primary: 'highlightsGreenDefault', //основная цветовая схема, указано значение модификатора _color
    accent: 'highlightsGreenDefault', //акцентная цветовая схема, указано значение модификатора _color
    invert: 'highlightsGreenDefault', //инвертная цветовая схема, указывается значение модификатора _color
  },
  control: 'gpnDefault', // указывается значение модификатора _control
  font: 'gpnDefault', // указывается значение модификатора _font
  size: 'gpnDefault', // указывается значение модификатора _size
  space: 'gpnDefault', // указывается значение модификатора _space
  shadow: 'gpnDefault', // указывается значение модификатора _shadow
}

moment.locale('ru')

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const [isCalendarOpen, setIsCalendarOpen] = useState(false)
  const [collapsed, setCollapsed] = useState(false)

  const currentDate = moment().format('ddd, MMMM D YYYY')

  return (
    <html lang="en">
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <ConfigProvider
          theme={{
            token: {
              // Seed Token
              colorLink: '#00b96b',
              colorPrimary: '#00b96b',
              borderRadius: 2,

              // Alias Token
              colorBgContainer: '#f6ffed',
            },
          }}
        >
          <QueryClientProvider client={queryClient}>
            <Theme preset={preset}>
              <SafeHydrate>
                <Layout>
                  <LayoutExampleBig />
                  <Row
                    style={{ paddingRight: '1rem', backgroundColor: '#fff' }}
                    gutter={[16, 16]}
                    wrap={false}
                  >
                    <Col
                      xs={{ flex: 'auto', order: 1 }}
                      sm={{ flex: 'auto', order: 1 }}
                      xl={{ flex: '80px', order: 0 }}
                      // flex={156}
                      // order={1}
                      style={{
                        backgroundColor: '#fff',
                        borderRight: '1px solid var(--color-bg-border)',
                      }}
                    >
                      <TravelMenu />
                    </Col>
                    <Col flex="auto" style={{ padding: '0 1rem' }}>
                      <Layout
                        className={styles.content}
                        style={{ backgroundColor: '#fff' }}
                      >
                        <Flex
                          gap={'middle'}
                          wrap
                          className={styles.widgetContainer}
                        >
                          <div style={{ paddingTop: '1rem' }}>
                            <SearchFeature />
                          </div>
                          <Flex vertical>
                            <Today
                              currentDate={currentDate}
                              open={isCalendarOpen}
                              onToggle={() => setIsCalendarOpen(prev => !prev)}
                            />
                          </Flex>
                        </Flex>
                        {children}
                      </Layout>
                    </Col>
                  </Row>
                </Layout>
              </SafeHydrate>
            </Theme>
            <ReactQueryDevtools />
          </QueryClientProvider>
        </ConfigProvider>
      </body>
    </html>
  )
}
